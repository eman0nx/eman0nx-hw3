#lang racket

(provide (all-defined-out))
(require rackunit)

(require 2htdp/batch-io)
(require 2htdp/universe)
(require 2htdp/image)

; Code
;; ex 34
; String -> String
; extracts the first character from a non-empty string
; (define (string-first x) "d")

; given: "HelloWorld", expect: "H"
; given: "apple", expect: "a"
; given: "&ampersand", expect: "&"

(define/contract (string-first x)
  (-> string? string?)
  (substring x 0 1))

;; ex 35
; String -> String
; extracts the last character from a non-empty string.

; given: "HelloWorld", expect: "d"
; given: "apple", expect: "e"
; given: "ampersand&", expect: "&"

(define/contract (string-last x)
  (-> string? string?)
  (if (>= (string-length x) 1)
      (substring x (- (string-length x) 1))
  "Empty string")) ;len-1 to len

;; ex 36
; Image -> Number
; counts the number of pixels in a given image.

; given: <cat>, expect: 8775

(define cat (bitmap/file "cat.png"))

(define/contract (image-area x)
  (-> image? number?)
  (* (image-width x) (image-height x)))

;; ex 37
; String -> String
; which produces a string like the given one with the first character removed.

; given: "HelloWorld", expect: "elloWorld"
; given: "apple", expect: "pple"
; given: "ampersand&", expect: "mpersand&"

(define/contract (string-rest x)
  (-> string? string?)
  (substring x 1))

;; ex 38
; String -> String
; produces a string like the given one with the last character removed.

; given: "HelloWorld", expect: "HelloWorl"
; given: "apple", expect: "appl"
; given: "asd23_*", expect: "asd23_"

(define/contract (string-remove-last x)
  (-> string? string?)
  (substring x 0 (- (string-length x) 1))) ;0 to n-1


;; ex 39
; WorldState -> WorldState 
;Develop your favorite image of an automobile so that WHEEL-RADIUS remains the single point of control.
(define WHEEL-RADIUS 5)    ;point of ctrl
(define WHEEL-DISTANCE (* WHEEL-RADIUS 5))  

;Graphical images
(define WHEEL                                                         
  (circle WHEEL-RADIUS "solid" "black"))    
(define SPACE                             
  (rectangle WHEEL-DISTANCE WHEEL-RADIUS "solid" "blue"))
(define BOTH-WHEELS                       
  (beside WHEEL SPACE WHEEL))


; Body
(define BODY
  (above
   (rectangle (* WHEEL-DISTANCE 2) WHEEL-RADIUS "solid" "blue")
   (rectangle (* WHEEL-DISTANCE 2) (* WHEEL-RADIUS 2) "solid" "blue")))

(overlay/align/offset "middle" "bottom"
                      BOTH-WHEELS
                      0 (* WHEEL-RADIUS -1)
                      BODY);)


;; ex 40
;Formulate the examples as BSL tests, that is, using the check-expect form.
;Introduce a mistake. Re-run the tests.

; WorldState -> WorldState 
; moves the car by 3 pixels for every clock tick
; examples:
;   given: 20, expect 38293    ;fail case
;   given: 20, expect 23
;   given: 78, expect 81
(define (tock ws)
  (+ ws 3))

(check-equal? (tock 20) 23)
(check-equal? (tock 78) 81)
(check-equal? (tock 20) 38293)    ;fail case
;(print 1/2)

;; ex 41
;Define the constants BACKGROUND and Y-CAR.
;Then assemble all the function definitions, including their tests.
;Add a tree to the scenery
;Also add a clause to the big-bang expression that stops the animation when the car has disappeared on the right side.

; Define BACKGROUND and Y-CAR
(define BACKGROUND (empty-scene 100 100))
(define Y-CAR (* WHEEL-RADIUS 5))
(define ROAD-LENGTH (* 4 (* WHEEL-RADIUS 8)))
(define SCENE-HEIGHT (* WHEEL-RADIUS 5))

(define CAR
  (overlay/align/offset "middle" "bottom"
                      BOTH-WHEELS
                      0 (* WHEEL-RADIUS -1)
                      BODY))


(define TREE
  (underlay/xy (circle 10 "solid" "green")
               (- WHEEL-RADIUS 9) (* WHEEL-RADIUS 15)
               (rectangle (/ WHEEL-RADIUS 2) (* WHEEL-RADIUS 20) "solid" "brown")))
              
(define BACKGROUND-TREE
  (place-image TREE (* .75 ROAD-LENGTH) (- SCENE-HEIGHT (/ (image-height TREE) 5)) BACKGROUND))

; WorldState -> Image
; places the car into the BACKGROUND scene,
; according to the given world state 
(define (render ws)
  (place-image CAR ws Y-CAR BACKGROUND-TREE))
;; tests

;;;main
; WorldState --> WorldState
; launches the world with car on left side of background
(define (main ws)
  (big-bang ws
    [on-tick tock]
    [to-draw render]))

;; ex 42
; Modify the interpretation of the sample data definition so that
;a state denotes the x-coordinate of the right-most edge of the car

;; ex 43

;; ex 44


  